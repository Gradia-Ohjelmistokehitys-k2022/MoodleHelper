@page "/Numerical"
@using static SyntaxGenerator.SyntaxGen
@using SyntaxGenerator.Models
@inject ClipboardService ClipboardService

<PageTitle>Numeerinen | MOODLE GENERAATTORI</PageTitle>


<h3>Numeerinen</h3>
@* <div>
	<label for="pointAmount">Syötä pistemäärä</label>
	<input id="pointAmount" name="pointAmount" type="number" @bind="pointAmount" style="width: 300px;" />
</div>

<div>
    <label for="shortAnswer">Syötä oikea vastaus.</label>
    <input id="shortAnswer" name="shortAnswer" @bind="answerString" style="width: 300px;" />
</div>

<div>
    <label for="marginAmount">Syötä prosentti.</label>
    <input id="marginAmount" name="marginAmount" @bind="marginAmount" style="width: 300px;" />
</div>

<div>
    <p>Syötä palaute</p>
    <textarea id="feedbackString" name="feedbackString" @bind="feedbackString" style="width: 300px;height: 150px;" />
</div> *@

Num items:
<input type="number" value="@itemCount" @oninput="onchange_n" max="10" min="1">
<br>
@*TÄHÄN ON OLTAVA HELPOMPI TAPA (TAVALLINEN SPACEBAR EI TOIMINUT???)*@
<p>Oikein&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vastaus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Marginaali&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pisteet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pisteprosentti&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Palaute</p>
@for (int i = 0; i < itemCount; i++)
{
    var currentItem = questionOptions[i];
    <input type="checkbox" @bind="@currentItem.IsChecked" />
    <input type="number" @bind="@currentItem.Answer" />
    <input type="number" @bind="@currentItem.Margin" />
    <input type="number" @bind="@currentItem.MaxPoints" />
    <input type="number" @bind="@currentItem.PointPercent" />
    <input type="text" @bind="@currentItem.Feedback" />
    <br />

    <br />
}

@code
{
    private int itemCount = 0, total = 0;
    bool test = false;
    // private List<int> testlist = new List<int>();
    // private List<bool> MyList = new List<bool>();
    // private List<string> MyList2 = new List<string>();
    // private List<string> MyList3 = new List<string>();

    private List<QuestionOption> questionOptions = new List<QuestionOption>();

    private void onchange_n(ChangeEventArgs e)
    {
        if (Int32.TryParse(e.Value.ToString(), out int items))
        {
            itemCount = items;
            while (questionOptions.Count < itemCount)
            {
                questionOptions.Add(new QuestionOption { IsChecked = false, Answer = 0, Margin = 0, MaxPoints = 1, PointPercent = 0, Feedback = "Palaute" });
        }


            while (questionOptions.Count > itemCount)
            {
                questionOptions.RemoveAt(questionOptions.Count - 1);
            }
            StateHasChanged();
        }
    }
}

<Button Color="ButtonColor.Primary" Outline="true" @onclick="GenerateNumerical">Luo syntaksi</Button>

<h3>Tulos: @numericalResult</h3>
@if (!string.IsNullOrWhiteSpace(numericalResult))
{
    <Button Color="ButtonColor.Secondary" Outline="true" @onclick="CopyToClipboard">Kopioi</Button>
}

@code {
    bool agree1; 
    private bool enabled = false;
    private bool disabled = true;
    private string numericalResult = "";
    private static string answerString { get; set; }
    private static string marginAmount { get; set; }
    private static string pointAmount { get; set; }
    private static decimal decimalAnswer;
    string previous = "";
    string feedbackString = "";
    List<int> ListOfPoints = new List<int>();
    List<AnswerOption> AnswersList = new List<AnswerOption>();


    private void GenerateNumerical()
    {
        AnswersList.Clear();
        ListOfPoints.Clear();
        foreach (var option in questionOptions)
        {
            AnswersList.Add(new AnswerOption(option.Answer.ToString(), option.IsChecked, option.Feedback, option.PointPercent));
            if (option.IsChecked == true)
            {
                ListOfPoints.Add(option.MaxPoints);
            }
            else
            {
                ListOfPoints.Add(0);
            }
        }
        numericalResult = CreateNumerical(AnswersList, feedbackString, Convert.ToDecimal(marginAmount), Convert.ToInt32(ListOfPoints.Max()));
    }


    // List<AnswerOption> AnswersList = new List<AnswerOption>();


    // private void GenerateNumerical()
    // {
    //     AnswersList.Add(new AnswerOption(answerString, true, pointAmount));

    //     //uses the generator from SyntaxGen.cs, which is located in the "SyntaxGenerator" project
    //     numericalResult = CreateNumerical(AnswersList, feedbackString, Convert.ToDecimal(marginAmount), Convert.ToInt32(pointAmount));

    // }

    async Task CopyToClipboard()
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(numericalResult);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
    public class QuestionOption
    {
        public bool IsChecked { get; set; }
        public int Answer { get; set; }
        public int Margin { get; set; }
        public int MaxPoints { get; set; }
        public int PointPercent { get; set; }
        public string Feedback { get; set; }
    }

}