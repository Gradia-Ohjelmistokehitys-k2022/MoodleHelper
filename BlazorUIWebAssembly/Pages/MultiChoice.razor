@page "/MultiChoice"
@using static SyntaxGenerator.SyntaxGen
@using SyntaxGenerator.Models
@inject ClipboardService ClipboardService

<PageTitle>Monivalinta | MOODLE GENERAATTORI</PageTitle>

<h3>Monivalinta</h3>
<p>Yksi vai useampi valittava vastaus?</p>
<label>Yksi</label> <label><Switch @bind-Value="show" @onclick="fixBoxed" Label="Useampi oikein"></Switch></label>

<br>
Vastausvaihtoehtojen määrä:
<input type="number" value="@itemCount" @oninput="onchange_n" max="10" min="1">
<br>

@for (int i = 0; i < itemCount; i++)
{
    var currentItem = questionOptions[i];
    <input type="checkbox" @bind="@currentItem.IsChecked" />
    <input type="text" @bind="@currentItem.Answer" />
    <input type="number" @bind="@currentItem.MaxPoints" />
    <input type="text" @bind="@currentItem.Feedback" />
    <br />

    <br />
}

@code
{
    private int itemCount = 0, total = 0;
    bool test = false;

    private List<QuestionOption> questionOptions = new List<QuestionOption>();

    private void onchange_n(ChangeEventArgs e)
    {
        if (Int32.TryParse(e.Value.ToString(), out int items))
        {
            itemCount = items;
            while (questionOptions.Count < itemCount)
            {
                questionOptions.Add(new QuestionOption { IsChecked = false, Answer = "Vastaus", MaxPoints = 1, Feedback = "Palaute" });
            }


            while (questionOptions.Count > itemCount)
            {
                questionOptions.RemoveAt(questionOptions.Count - 1);
            }
            StateHasChanged();
        }
    }
}

<div>
    <Switch @bind-Value="shuffleAnswers" Label="Sekoita vastaukset?" />
</div>

    <Dropdown>
        <DropdownToggleButton Color="ButtonColor.Secondary">Vastauksen tyyppi</DropdownToggleButton>
        <DropdownMenu>
            <DropdownItem @onclick="DisableOthersThanVertical" Type="ButtonType.Link">Pysty</DropdownItem>
            <DropdownItem @onclick="DisableOthersThanHorizontal" Type="ButtonType.Link">Vaaka</DropdownItem>
            <DropdownItem @onclick="DisableOthersThanBoxed" Disabled="@show" Type="ButtonType.Link">Laatikko</DropdownItem>
        </DropdownMenu>
    </Dropdown>


<div>
    <Button Color="ButtonColor.Primary" Outline="true" @onclick="GenerateMultiChoice">Luo syntaksi</Button>
</div>



<h3>Tulos: @MultiChoiceResult</h3>
@if (!string.IsNullOrWhiteSpace(MultiChoiceResult))
{
    <Button Color="ButtonColor.Secondary" Outline="true" @onclick="CopyToClipboard">Kopioi</Button>
}

@code {
    bool answercheckbox1;
    bool answercheckbox2;
    bool answercheckbox3;
    bool answercheckbox4;

    private static string answerString1 { get; set; }
    private static string answerString2 { get; set; }
    private static string answerString3 { get; set; }
    private static string answerString4 { get; set; }

    private static string pointAmount1 { get; set; }
    private static string pointAmount2 { get; set; }
    private static string pointAmount3 { get; set; }
    private static string pointAmount4 { get; set; }

    private static string feedbackString1 { get; set; }
    private static string feedbackString2 { get; set; }
    private static string feedbackString3 { get; set; }
    private static string feedbackString4 { get; set; }

    bool shuffleAnswers;
    bool horizontalOrVertical;
    bool verticalTrue = true;
    bool horizontalTrue = false;
    bool boxedTrue = false;
    private static bool? finalValue = null;
    string finalString = "";
    private bool enabled = false;
    private bool disabled = true;
    private string MultiChoiceResult = "";
    private static string previous = "";
    private string answerLabel = "";
    List<AnswerOption> MultiChoiceList = new List<AnswerOption>();
    private bool show = false;
    private static bool finalValueNotNull;

    List<int> ListOfPoints = new List<int>();
    List<AnswerOption> AnswersList = new List<AnswerOption>();
    int maxPointsSum=0;

    //In case boxed is selected while disabling it, this will change boxed into vertical. != true is because onclick happens before the actual value change.
    private void fixBoxed()
    {
        if (boxedTrue == true&&show!=true)
        {
            DisableOthersThanVertical();
        }
    }

    private void SetLabel()
    {
        if (verticalTrue == true)
        {
            answerLabel = "PYSTYSUUNTAINEN MONIVALINTA";
        }
        if (horizontalTrue == true)
        {
            answerLabel = "VAAKASUUNTAINEN MONIVALINTA";
        }
        if (boxedTrue == true)
        {
            answerLabel = "LAATIKKOVASTAUS";
        }
    }

    private void DisableOthersThanVertical()
    {
        verticalTrue = true;
        horizontalTrue = false;
        boxedTrue = false;
        SetLabel();
        finalValue = true;
    }
    private void DisableOthersThanHorizontal()
    {
        verticalTrue = false;
        horizontalTrue = true;
        boxedTrue = false;
        SetLabel();
        finalValue = false;
    }
    private void DisableOthersThanBoxed()
    {
        verticalTrue = false;
        horizontalTrue = false;
        boxedTrue = true;
        SetLabel();
        finalValue = null;
    }



    private void GenerateMultiChoice()
    {
        ListOfPoints.Clear();
        AnswersList.Clear();
        foreach (var option in questionOptions)
        {
            AnswersList.Add(new AnswerOption(option.Answer, option.IsChecked, option.Feedback, option.MaxPoints));
            if (option.IsChecked == true)
            {
                ListOfPoints.Add(option.MaxPoints);
            }
            else
            {
                ListOfPoints.Add(0);
            }
        }
        maxPointsSum = ListOfPoints.Sum();
        

        if (show == false)
        {
            MultiChoiceResult = CreateMultiChoice(AnswersList, shuffleAnswers, finalValue/* , Int32.Parse(pointAmount) */);
        }
        else
        {
            if (show == true)
            {
                finalValueNotNull = finalValue.HasValue ? finalValue.Value : false;
                MultiChoiceResult = CreateMultiResponse(AnswersList, shuffleAnswers, finalValueNotNull/* , Int32.Parse(pointAmount) */);
            }
        }
    }

    public class QuestionOption
    {
        public bool IsChecked { get; set; }
        public string Answer { get; set; }
        public int MaxPoints { get; set; }
        public string Feedback { get; set; }
    }

    async Task CopyToClipboard()
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(MultiChoiceResult);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
}