@page "/MultiChoice"
@using static SyntaxGenerator.SyntaxGen
@using SyntaxGenerator.Models
@inject IJSRuntime JSRuntime
@inject ClipboardService ClipboardService

<PageTitle>Monivalinta | MOODLE GENERAATTORI</PageTitle>

<h3>Monivalinta</h3>
<p>Yksi vai useampi valittava vastaus?</p>
<label>Yksi</label> <label><Switch @bind-Value="show" @onclick="fixBoxed" Label="Useampi oikein"></Switch></label>


<div>
    <p>Syötä vastaukset, ja että onko oikein vai väärin. Erottele useammat vastaukset rivinvaihdolla. Jos oikeita vastauksia on enemmän kuin yksi, pisteet tulevat jokaisesta oikeista vastauksesta.
    </p>
</div>

<div>
    <input type="checkbox" @bind="answercheckbox1"><textarea id="shortAnswer" @bind="answerString1" style="width: 300px;" /><input type="number" @bind="pointAmount1" style="width: 50px;" /><textarea @bind="feedbackString1" style="width: 100px;" />
</div>
<div>
    <input type="checkbox" @bind="answercheckbox2"><textarea id="shortAnswer" @bind="answerString2" style="width: 300px;" /><input type="number" @bind="pointAmount2" style="width: 50px;" /><textarea @bind="feedbackString2" style="width: 100px;" />
</div>
<div>
    <input type="checkbox" @bind="answercheckbox3"><textarea id="shortAnswer" @bind="answerString3" style="width: 300px;" /><input type="number" @bind="pointAmount3" style="width: 50px;" /><textarea @bind="feedbackString3" style="width: 100px;" />
</div>
<div>
    <input type="checkbox" @bind="answercheckbox4"><textarea id="shortAnswer" @bind="answerString4" style="width: 300px;" /><input type="number" @bind="pointAmount4" style="width: 50px;" /><textarea @bind="feedbackString4" style="width: 100px;" />
</div>

<div>
    <Switch @bind-Value="shuffleAnswers" Label="Sekoita vastaukset?" />
</div>

<div>
    <label>Vastauksen tyyppi? @answerLabel</label>
</div>

    <Dropdown>
        <DropdownToggleButton Color="ButtonColor.Secondary">Vastauksen tyyppi</DropdownToggleButton>
        <DropdownMenu>
            <DropdownItem @onclick="DisableOthersThanVertical" Type="ButtonType.Link">Pysty</DropdownItem>
            <DropdownItem @onclick="DisableOthersThanHorizontal" Type="ButtonType.Link">Vaaka</DropdownItem>
            <DropdownItem @onclick="DisableOthersThanBoxed" Disabled="@show" Type="ButtonType.Link">Laatikko</DropdownItem>
        </DropdownMenu>
    </Dropdown>


<div>
    <Button Color="ButtonColor.Primary" Outline="true" @onclick="GenerateMultiChoice">Luo syntaksi</Button>
</div>



<h3>Tulos: @MultiChoiceResult</h3>
@if (!string.IsNullOrWhiteSpace(MultiChoiceResult))
{
    <button @onclick="CopyToClipboard">Kopioi</button>
}

@code {
    bool answercheckbox1;
    bool answercheckbox2;
    bool answercheckbox3;
    bool answercheckbox4;

    private static string answerString1 { get; set; }
    private static string answerString2 { get; set; }
    private static string answerString3 { get; set; }
    private static string answerString4 { get; set; }

    private static string pointAmount1 { get; set; }
    private static string pointAmount2 { get; set; }
    private static string pointAmount3 { get; set; }
    private static string pointAmount4 { get; set; }

    private static string feedbackString1 { get; set; }
    private static string feedbackString2 { get; set; }
    private static string feedbackString3 { get; set; }
    private static string feedbackString4 { get; set; }

    bool shuffleAnswers;
    bool horizontalOrVertical;
    bool verticalTrue = true;
    bool horizontalTrue = false;
    bool boxedTrue = false;
    private static bool? finalValue = null;
    string finalString = "";
    private bool enabled = false;
    private bool disabled = true;
    private string MultiChoiceResult = "";
    private static string previous = "";
    private string answerLabel = "";
    List<AnswerOption> MultiChoiceList = new List<AnswerOption>();
    private bool show = false;
    private static bool finalValueNotNull;

    //In case boxed is selected while disabling it, this will change boxed into vertical. != true is because onclick happens before the actual value change.
    private void fixBoxed()
    {
        if (boxedTrue == true&&show!=true)
        {
            DisableOthersThanVertical();
        }
    }

    private void SetLabel()
    {
        if (verticalTrue == true)
        {
            answerLabel = "PYSTYSUUNTAINEN MONIVALINTA";
        }
        if (horizontalTrue == true)
        {
            answerLabel = "VAAKASUUNTAINEN MONIVALINTA";
        }
        if (boxedTrue == true)
        {
            answerLabel = "LAATIKKOVASTAUS";
        }
    }

    private void DisableOthersThanVertical()
    {
        verticalTrue = true;
        horizontalTrue = false;
        boxedTrue = false;
        SetLabel();
        finalValue = true;
    }
    private void DisableOthersThanHorizontal()
    {
        verticalTrue = false;
        horizontalTrue = true;
        boxedTrue = false;
        SetLabel();
        finalValue = false;
    }
    private void DisableOthersThanBoxed()
    {
        verticalTrue = false;
        horizontalTrue = false;
        boxedTrue = true;
        SetLabel();
        finalValue = null;
    }


    private void GenerateMultiChoice()
    {
        MultiChoiceList.Clear();
        if (answerString1 != "")
        {
            MultiChoiceList.Add(new AnswerOption(answerString1, answercheckbox1, feedbackString1));
        }
        if (answerString2 != "")
        {
            MultiChoiceList.Add(new AnswerOption(answerString2, answercheckbox2, feedbackString2));
        }
        if (answerString3 != "")
        {
            MultiChoiceList.Add(new AnswerOption(answerString3, answercheckbox3, feedbackString3));
        }
        if (answerString4 != "")
        {
            MultiChoiceList.Add(new AnswerOption(answerString4, answercheckbox4, feedbackString4)); 
        }

        // foreach (string line in answerString.Split('\n'))
        // {
        //     foreach (string correct in line.Split(";"))
        //     {
        //         if (correct == "true")
        //         {
        //             MultiChoiceList.Add(new AnswerOption(previous, Convert.ToBoolean(correct)));
        //         }
        //         if (correct == "false")
        //         {
        //             MultiChoiceList.Add(new AnswerOption(previous, Convert.ToBoolean(correct)));
        //         }
        //         if (correct != "false")
        //         {
        //             previous = correct;
        //         }
        //     }
        // }
        

        if (show == false)
        {
            MultiChoiceResult = CreateMultiChoice(MultiChoiceList, shuffleAnswers, finalValue/* , Int32.Parse(pointAmount) */);
        }
        else
        {
            if (show == true)
            {
                finalValueNotNull = finalValue.HasValue ? finalValue.Value : false;
                MultiChoiceResult = CreateMultiResponse(MultiChoiceList, shuffleAnswers, finalValueNotNull/* , Int32.Parse(pointAmount) */);
            }
        }
    }

    async Task CopyToClipboard()
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(MultiChoiceResult);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
}