@page "/MultiChoice"
@using static SyntaxGenerator.SyntaxGen
@using SyntaxGenerator.Models
@inject ClipboardService ClipboardService

<PageTitle>Monivalinta | MOODLE GENERAATTORI</PageTitle>


<Toasts class="p-3" Messages="copyNotif" StackLength="3" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomLeft" />

<h3>Monivalinta</h3>

<div class="row mb-4">
    <div class="col-md-2">
        <div class="form-group">
            <label for="itemCount">Vastausvaihtoehtojen määrä:</label>
            <input type="number" class="form-control w-100" value="@itemCount" @oninput="onchange_n" max="10" min="0">
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <Tooltip Title="Oikeasta vastauksesta annettavien pisteiden määrä" for="maxPoints">Maksimipistemäärä:</Tooltip>
            <input type="number" class="form-control w-100" @bind="@maxPoints">
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <label for="shuffleAnswers">Sekoita vastaukset?</label>
            <Switch id="shuffleAnswers" @bind-Value="shuffleAnswers" />
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <Tooltip Title="Voiko oppilas valita useamman vastausvaihtoehdon" for="multichoice">Useampi vastaus?</Tooltip>
            <Switch id="multichoice" @bind-Value="show" @onclick="fixBoxed"></Switch>
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <Dropdown>
                <DropdownToggleButton Color="ButtonColor.Secondary">@answerLabel</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownHeader>Vastauksen esitystyyli</DropdownHeader>
                    <DropdownItem @onclick="DisableOthersThanVertical" Type="ButtonType.Link">Päällekkäin</DropdownItem>
                    <DropdownItem @onclick="DisableOthersThanHorizontal" Type="ButtonType.Link">Rivissä</DropdownItem>
                    <DropdownItem @onclick="DisableOthersThanBoxed" Disabled="@show" Type="ButtonType.Link">Pudotusvalikossa</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>
    </div>
</div>


@for (int i = 0; i < itemCount; i++)
{
    var currentItem = questionOptions[i];

    <div class="row mb-3">
        <div class="col-md-4">
            <div class="form-group">
                <label for="@($"questionText-{i}")">Vastaus:</label>
                <input type="text" class="form-control w-100" id="@($"questionText-{i}")" @bind="@currentItem.Answer" placeholder="Vastausvaihtoehto" />
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <Tooltip Title="Kuinka monta prosenttia maksimipisteitä tästä vastauksesta annetaan (100 = oikea vastaus)" for="@($"points-{i}")">Prosenttiosuus maksimipisteistä:</Tooltip>
                <input type="number" class="form-control w-100" id="@($"points-{i}")" @bind="@currentItem.PointsPercent" />
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <Tooltip Title="Annettava palaute, mikäli oppilas vastaa tämän vastauksen" for="@($"feedback-{i}")">Palaute:</Tooltip>
                <textarea class="form-control w-100" id="@($"feedback-{i}")" @bind="@currentItem.Feedback" placeholder="Tehtäväkohtainen palaute"></textarea>
            </div>
        </div>
    </div>
}

@code
{
    private int itemCount = 0, total = 0;
    bool test = false;

    private List<QuestionOption> questionOptions = new List<QuestionOption>();

    private void onchange_n(ChangeEventArgs e)
    {
        if (Int32.TryParse(e.Value.ToString(), out int items))
        {
            itemCount = items;
            while (questionOptions.Count < itemCount)
            {
                questionOptions.Add(new QuestionOption { Answer = "", PointsPercent = 100, Feedback = "" });
            }


            while (questionOptions.Count > itemCount)
            {
                questionOptions.RemoveAt(questionOptions.Count - 1);
            }
            StateHasChanged();
        }
    }
}




<div class="row mb-4">
    <div class="col-md-12">
        <div class="form-group">
            <Button Color="ButtonColor.Primary" Outline="true" @onclick="GenerateMultiChoice">Luo syntaksi</Button>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(MultiChoiceResult))
    {
        <div class="col-md-12">
            <div class="form-group">
                <h2>Tulos:</h2>
                <pre>@MultiChoiceResult</pre>
            </div>
        </div>

        <div class="col-md-12">
            <div class="form-group">
                <Button Color="ButtonColor.Secondary" Outline="true" @onclick="CopyToClipboard"><Icon Name="IconName.Clipboard" /> Kopioi </Button>
            </div>
        </div>
    }
</div>

@code {
    List<ToastMessage> copyNotif = new();
    private void ShowMessage(ToastType toastType, string message) => copyNotif.Add(CreateToastMessage(toastType, message));
    private ToastMessage CreateToastMessage(ToastType toastType, string message) => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };

    bool shuffleAnswers;
    bool horizontalOrVertical;
    bool verticalTrue = true;
    bool horizontalTrue = false;
    bool boxedTrue = false;
    private static bool? finalValue = null;
    string finalString = "";
    private bool enabled = false;
    private bool disabled = true;
    private string MultiChoiceResult = "";
    private static string previous = "";
    private string answerLabel = "Päällekkäin";
    List<AnswerOption> MultiChoiceList = new List<AnswerOption>();
    private bool show = false;
    private static bool finalValueNotNull;

    private int maxPoints = 1;

    List<int> ListOfPoints = new List<int>();
    List<AnswerOption> AnswersList = new List<AnswerOption>();
    int maxPointsSum=0;

    //In case boxed is selected while disabling it, this will change boxed into vertical. != true is because onclick happens before the actual value change.
    private void fixBoxed()
    {
        if (boxedTrue == true&&show!=true)
        {
            DisableOthersThanVertical();
        }
    }

    private void SetLabel()
    {
        if (verticalTrue == true)
        {
            answerLabel = "Päällekkäin";
        }
        if (horizontalTrue == true)
        {
            answerLabel = "Rivissä";
        }
        if (boxedTrue == true)
        {
            answerLabel = "Pudotusvalikossa";
        }
    }

    private void DisableOthersThanVertical()
    {
        verticalTrue = true;
        horizontalTrue = false;
        boxedTrue = false;
        SetLabel();
        finalValue = true;
    }
    private void DisableOthersThanHorizontal()
    {
        verticalTrue = false;
        horizontalTrue = true;
        boxedTrue = false;
        SetLabel();
        finalValue = false;
    }
    private void DisableOthersThanBoxed()
    {
        verticalTrue = false;
        horizontalTrue = false;
        boxedTrue = true;
        SetLabel();
        finalValue = null;
    }



    private void GenerateMultiChoice()
    {
        ListOfPoints.Clear();
        AnswersList.Clear();
        foreach (var option in questionOptions)
        {
            AnswersList.Add(new AnswerOption(option.Answer, option.Feedback, option.PointsPercent));
        }
        

        if (show == false)
        {
            MultiChoiceResult = CreateMultiChoice(AnswersList, shuffleAnswers, finalValue, maxPoints);
        }
        else
        {
            if (show == true)
            {
                finalValueNotNull = finalValue.HasValue ? finalValue.Value : false;
                MultiChoiceResult = CreateMultiResponse(AnswersList, shuffleAnswers, finalValueNotNull, maxPoints);
            }
        }
    }

    public class QuestionOption
    {
        public string Answer { get; set; }
        public int PointsPercent { get; set; }
        public string Feedback { get; set; }
    }

    async Task CopyToClipboard()
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(MultiChoiceResult);
            ShowMessage(ToastType.Success, $"Kopiotu leikepöydälle!");
        }
        catch
        {
            ShowMessage(ToastType.Danger, $"Kopiointi ei onnistunut");
        }
    }
}