@page "/ShortAnswer"
@using static SyntaxGenerator.SyntaxGen
@using SyntaxGenerator.Models
@inject ClipboardService ClipboardService


<PageTitle>Lyhyt vastaus | MOODLE GENERAATTORI</PageTitle>

<h3>LyhytVastaus</h3>


@* Mahdollisten vaihtoehtojen määrä:
<input type="number" value="@N" @oninput="onchange_n" min="1" max="10">
<br> *@

Num items:
<input type="number" value="@itemCount" @oninput="onchange_n">
<br>

@for (int i = 0; i < itemCount; i++)
{
    var currentItem = questionOptions[i];
    <input type="checkbox" @bind="@currentItem.IsChecked" />
    <input type="text" @bind="@currentItem.Answer" />
    <input type="text" @bind="@currentItem.Feedback" />
    <br />
    
    <br />
}

@code
{
    private int itemCount = 0, total = 0;
    bool test = false;
    // private List<int> testlist = new List<int>();
    // private List<bool> MyList = new List<bool>();
    // private List<string> MyList2 = new List<string>();
    // private List<string> MyList3 = new List<string>();

    private List<QuestionOption> questionOptions = new List<QuestionOption>();
    
    private void onchange_n(ChangeEventArgs e)
    {
        if (Int32.TryParse(e.Value.ToString(), out int items))
        {
            itemCount = items;
            while (questionOptions.Count < itemCount)
            {
                questionOptions.Add(new QuestionOption { IsChecked = false, Answer = "Vastaus", Feedback = "Palaute" });
            }

  
            while (questionOptions.Count > itemCount)
            {
                questionOptions.RemoveAt(questionOptions.Count - 1);
            }
            StateHasChanged();
        }
    }
}

@* <p>Syötä Vastaus/Vastaukset. Jos vaihtoehtoja ei ole ihan neljää, jätä loput vastauskentät tyhjiksi. Muista merkitä rastilla onko oikein vai väärin.</p>
<div>
    <input type="checkbox" @bind="answercheckbox1"><textarea id="shortAnswer" @bind="answerString1" style="width: 300px;" />
    <input type="number" @bind="pointAmount1" style="width: 50px;" /> <textarea @bind="feedbackString1" style="width: 100px;" />
</div> *@


<Switch @bind-Value="caseSensitiveCheck" Label="Merkkiriippuvainen?" />

<Button Color="ButtonColor.Primary" Outline="true" @onclick="GenerateShort">Luo syntaksi</Button>


<h3>Tulos: @shortResult</h3>

@if (!string.IsNullOrWhiteSpace(shortResult))
{
    <button @onclick="CopyToClipboard">Kopioi</button>
}


@code {

    bool caseSensitiveCheck;
    bool disabledCopy =true;
    private bool enabled = false;
    private bool disabled = true;
    private string shortResult = "";
    string previous = "";
    List<AnswerOption> AnswersList = new List<AnswerOption>();


    private void GenerateShort()
    {
        AnswersList.Clear();
        foreach (var option in questionOptions)
        {
            AnswersList.Add(new AnswerOption(option.Answer, option.IsChecked, option.Feedback));
        }

        // foreach (string line in answerString.Split('\n'))
        // {
        //     foreach (string correct in line.Split(";"))
        //     {
        //         if (correct == "true")
        //         {
        //             AnswersList.Add(new AnswerOption(previous, Convert.ToBoolean(correct)));
        //         }
        //         if (correct == "false")
        //         {
        //             AnswersList.Add(new AnswerOption(previous, Convert.ToBoolean(correct)));
        //         }
        //         if (correct != "false")
        //         {
        //             previous = correct;                    
        //         }
        //     }
        // }
        //uses the generator from SyntaxGen.cs, which is located in the "SyntaxGenerator" project
        shortResult = SyntaxGen.CreateShortAnswer(AnswersList, null, caseSensitiveCheck);
    }

    public class QuestionOption
    {
        public bool IsChecked { get; set; }
        public string Answer { get; set; }
        public string Feedback { get; set; }
    }

    async Task CopyToClipboard()
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(shortResult);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
}