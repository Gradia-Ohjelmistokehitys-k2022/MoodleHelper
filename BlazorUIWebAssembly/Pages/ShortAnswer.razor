@page "/ShortAnswer"
@using static SyntaxGenerator.SyntaxGen
@using SyntaxGenerator.Models
@using BlazorUIWebAssembly.Shared
@inject ClipboardService ClipboardService


<PageTitle>Avoin vastaus | MOODLE GENERAATTORI</PageTitle>

@*Class for the notifications*@
<Toasts class="p-3" Messages="copyNotif" StackLength="3" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomLeft" />

<h3>Avoin vastaus</h3>

<div class="row mb-4">
    <div class="col-md-2">
        <div class="form-group">
            <label for="itemCount">Vastausvaihtoehtojen määrä:</label>
            <input type="number" class="form-control w-100" value="@itemCount" @oninput="onchange_n" max="10" min="0">
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <Tooltip Title="Oikeasta vastauksesta annettavien pisteiden määrä" for="maxPoints">Maksimipistemäärä:</Tooltip>
            <input type="number" class="form-control w-100" @bind="@maxPoints">
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <Tooltip Title="Vaikuttaako vastauksen hyväksymiseen isot kirjaimet, vai ei" for="caseSensitive">Merkkiriippuvainen?</Tooltip>
            <Switch id="caseSensitive" @bind-Value="caseSensitiveCheck" />
        </div>
    </div>
</div>

@for (int i = 0; i < itemCount; i++)
{
    var currentItem = questionOptions[i];

    <div class="row mb-3">
        <div class="col-md-4">
            <div class="form-group">
                <label for="@($"questionText-{i}")">Vastaus:</label>
                <input type="text" class="form-control w-100" id="@($"questionText-{i}")" @bind="@currentItem.Answer" placeholder="Vastausvaihtoehto" />
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <Tooltip Title="Kuinka monta prosenttia maksimipisteitä tästä vastauksesta annetaan (100 = oikea vastaus)" for="@($"points-{i}")">Prosenttiosuus maksimipisteistä:</Tooltip>
                <input type="number" class="form-control w-100" id="@($"points-{i}")" @bind="@currentItem.PointsPercent" />
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <Tooltip Title="Annettava palaute, mikäli oppilas vastaa tämän vastauksen" for="@($"feedback-{i}")">Palaute:</Tooltip>
                <textarea class="form-control w-100" id="@($"feedback-{i}")" @bind="@currentItem.Feedback" placeholder="Tehtäväkohtainen palaute"></textarea>
            </div>
        </div>
    </div>
}

@code
{
    private int itemCount = 0, total = 0;
    bool test = false;

    private List<QuestionOption> questionOptions = new List<QuestionOption>();
    
    private void onchange_n(ChangeEventArgs e)
    {
        if (Int32.TryParse(e.Value.ToString(), out int items))
        {
            itemCount = items;
            while (questionOptions.Count < itemCount)
            {
                questionOptions.Add(new QuestionOption { Answer = "", PointsPercent = 100, Feedback = "" });
            }

  
            while (questionOptions.Count > itemCount)
            {
                questionOptions.RemoveAt(questionOptions.Count - 1);
            }
            StateHasChanged();
        }
    }
}


<div class="row mb-4">
    <div class="col-md-12">
        <div class="form-group">
            <Button Color="ButtonColor.Primary" Outline="true" @onclick="GenerateShort">Luo syntaksi</Button>
        </div>
    </div>
   
@if (!string.IsNullOrWhiteSpace(shortResult))
{
    <div class="col-md-12">
        <div class="form-group">
            <h2>Tulos:</h2>
            <pre>@shortResult</pre>
        </div>
    </div>

    <div class="col-md-12">
         <div class="form-group">
                <Button Color="ButtonColor.Secondary" Outline="true" @onclick="CopyToClipboard"><Icon Name="IconName.Clipboard" /> Kopioi </Button>
        </div>
    </div>
}
</div>

@code {
    List<ToastMessage> copyNotif = new();
    private void ShowMessage(ToastType toastType, string message) => copyNotif.Add(CreateToastMessage(toastType, message));
    @*Creates a new notification*@
    private ToastMessage CreateToastMessage(ToastType toastType, string message) => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };

    bool caseSensitiveCheck;
    bool disabledCopy =true;
    private bool enabled = false;
    private bool disabled = true;
    private string shortResult = "";
    string previous = "";
    int maxPoints = 1;

    List<AnswerOption> AnswersList = new List<AnswerOption>();


    private void GenerateShort()
    {
        AnswersList.Clear();
        foreach (var option in questionOptions)
        {
            if (string.IsNullOrWhiteSpace(option.Answer))
            {

                break;
            }
            AnswersList.Add(new AnswerOption(option.Answer, option.Feedback, option.PointsPercent));
        }

        //uses the generator from SyntaxGen.cs, which is located in the "SyntaxGenerator" project
        shortResult = SyntaxGen.CreateShortAnswer(AnswersList, null, caseSensitiveCheck, maxPoints);
    }

    public class QuestionOption
    {
        public string Answer { get; set; }
        public int PointsPercent { get; set; }
        public string Feedback { get; set; }
    }

    async Task CopyToClipboard()
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(shortResult);

            ShowMessage(ToastType.Success, $"Kopiotu leikepöydälle!");
        }
        catch
        {
            ShowMessage(ToastType.Danger, $"Kopiointi ei onnistunut");
        }
    }
}