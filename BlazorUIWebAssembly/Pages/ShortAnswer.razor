@page "/ShortAnswer"
@using static SyntaxGenerator.SyntaxGen
@using SyntaxGenerator.Models


<PageTitle>Lyhyt vastaus | MOODLE GENERAATTORI</PageTitle>

<h3>LyhytVastaus</h3>


@* Mahdollisten vaihtoehtojen määrä:
<input type="number" value="@N" @oninput="onchange_n" min="1" max="10">
<br> *@

Num items:
<input type="number" value="@N" @oninput="onchange_n">
<br>

@* Issue over here! *@
@foreach (var i in testlist)
{
    <input type="checkbox" @bind-value="@CheckboxList[i]" @oninput="StateHasChanged">
    <input type="text" @bind-value="@Answers[i]" @oninput="StateHasChanged">
    <input type="text" @bind="@Feedback[i]">
    <br>
}

@code
{
    private int N = 0, total = 0;
    bool test = false;
    private List<int> testlist = new List<int>();
    private List<bool> CheckboxList = new List<bool>();
    private List<string> Answers = new List<string>();
    private List<string> Feedback = new List<string>();
    private void onchange_n(ChangeEventArgs e)
    {
        N = 0;
        if (Int32.TryParse(e.Value.ToString(), out int n)) N = n;
        testlist.Clear();
        testlist.AddRange(Enumerable.Range(0, N).Select(_ => 0));

        CheckboxList.Clear();
        Answers.Clear();
        Feedback.Clear();
        foreach (int i in testlist)
        {
            CheckboxList.Add(false);
            Answers.Add("Vastaus");
            Feedback.Add("Palaute");
        }
        StateHasChanged();
    }
}

@* <p>Syötä Vastaus/Vastaukset. Jos vaihtoehtoja ei ole ihan neljää, jätä loput vastauskentät tyhjiksi. Muista merkitä rastilla onko oikein vai väärin.</p>
<div>
    <input type="checkbox" @bind="answercheckbox1"><textarea id="shortAnswer" @bind="answerString1" style="width: 300px;" />
    <input type="number" @bind="pointAmount1" style="width: 50px;" /> <textarea @bind="feedbackString1" style="width: 100px;" />
</div> *@


<Switch @bind-Value="caseSensitiveCheck" Label="Merkkiriippuvainen?" />

<Button Color="ButtonColor.Primary" Outline="true" @onclick="GenerateShort">Luo syntaksi</Button>

<div>   
    <h3>Tulos: @shortResult</h3>
</div>



@code {

    bool caseSensitiveCheck;
    bool disabledCopy =true;
    private bool enabled = false;
    private bool disabled = true;
    private string shortResult = "";
    string previous = "";
    List<AnswerOption> AnswersList = new List<AnswerOption>();


    private void GenerateShort()
    {
        AnswersList.Clear();
        foreach (int i in testlist)
        {
            AnswersList.Add(new AnswerOption(Answers[i], CheckboxList[i], Feedback[i]));
        }

        // foreach (string line in answerString.Split('\n'))
        // {
        //     foreach (string correct in line.Split(";"))
        //     {
        //         if (correct == "true")
        //         {
        //             AnswersList.Add(new AnswerOption(previous, Convert.ToBoolean(correct)));
        //         }
        //         if (correct == "false")
        //         {
        //             AnswersList.Add(new AnswerOption(previous, Convert.ToBoolean(correct)));
        //         }
        //         if (correct != "false")
        //         {
        //             previous = correct;                    
        //         }
        //     }
        // }
        //uses the generator from SyntaxGen.cs, which is located in the "SyntaxGenerator" project
        shortResult = SyntaxGen.CreateShortAnswer(AnswersList, null, caseSensitiveCheck);
    }
}